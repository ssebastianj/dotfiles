# shellcheck shell=bash

#### =========================== Functions ===================================

# Assume "bash" shell by default
# 1 = bash
# 2 = zsh
# 3 = fish
guessed_shell='1'

guess_shell() {
    if [[ -n "$BASH_VERSION" ]]; then
        # Assume shell is bash
        guessed_shell='1'
    elif [[ -n "$ZSH_VERSION" ]]; then
        # Assume shell is zsh
        guessed_shell='2'
    elif [[ -n "$FISH_VERSION" ]]; then
        # Assume shell is fish
        guessed_shell='3'
    fi
}
# Try to guess shell
guess_shell

is_bash_shell() {
    [[ "$guessed_shell" == '1' ]]
}

is_zsh_shell() {
    [[ "$guessed_shell" == '2' ]]
}

is_fish_shell() {
    [[ "$guessed_shell" == '3' ]]
}

#### ============================ ssebastianj ================================

#### Aliases -----------------------------------------------------------------
# shellcheck source=/dev/null
[[ -s "$HOME/.aliases" ]] && source "$HOME/.aliases"

#### Root dir for development purposes ---------------------------------------
export DEVDIR="$HOME/development"

#### rbenv -------------------------------------------------------------------
lazyrbenv() {
    unset -f rbenv
    export RBENV_ROOT="$HOME/.rbenv"
    export PATH="$RBENV_ROOT/bin:$PATH"
    [[ -d "$RBENV_ROOT" ]] && rbenv init -
}

rbenv() {
    lazyrbenv && rbenv "$@"
}

#### tmuxinator --------------------------------------------------------------
export EDITOR="vim"

case "$guessed_shell" in
    '2')
        # zsh
        if [[ -s "$HOME/.bin/tmuxinator.zsh" ]]; then
            # shellcheck source=/dev/null
            source "$HOME/.bin/tmuxinator.zsh"
        fi
        ;;
    '3')
        # fish
        if [[ -s "$HOME/.bin/tmuxinator.fish" ]]; then
            cp --update --backup "$HOME/.bin/tmuxinator.fish" "$HOME/.config/fish/completions/"
        fi
        ;;
           
    *)
        # bash
        if [[ -s "$HOME/.bin/tmuxinator.bash" ]]; then
            # shellcheck source=/dev/null
            source "$HOME/.bin/tmuxinator.bash"
        fi
        ;;
esac

#### Node Version Manager ----------------------------------------------------

lazynvm() {
    unset -f nvm node npm
    export NVM_DIR="$HOME/.nvm"
    # shellcheck source=/dev/null
    [[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"  # This loads nvm
}

nvm() {
  lazynvm
  nvm "$@"
}

node() {
  lazynvm
  node "$@"
}

npm() {
  lazynvm
  npm "$@"
}

#### Python pip user binaries ------------------------------------------------
export PATH="$HOME/.local/bin:$PATH"

#### Virtualenvwrapper -------------------------------------------------------
export WORKON_HOME="$DEVDIR/.virtualenvs"
export PROJECT_HOME="$DEVDIR"
export VIRTUALENVWRAPPER_SCRIPT="$HOME/.local/bin/virtualenvwrapper.sh"
# shellcheck source=/dev/null
[[ -s "$HOME/.local/bin/virtualenvwrapper_lazy.sh" ]] && source "$HOME/.local/bin/virtualenvwrapper_lazy.sh"

#### Django ------------------------------------------------------------------
export DJANGO_SRC_PATH="$DEVDIR/django"

if [[ -d "$DJANGO_SRC_PATH" ]]; then
    if is_zsh_shell; then
        autoload -Uz bashcompinit && bashcompinit
    fi

    # shellcheck source=/dev/null
    source "$DJANGO_SRC_PATH/extras/django_bash_completion"
fi

#### Golang ------------------------------------------------------------------
export GOPATH="$DEVDIR/gocode"
export PATH="$PATH:$GOPATH/bin"

#### Git ---------------------------------------------------------------------
export PATH="$HOME/.git-contrib:$PATH"

#### Rust --------------------------------------------------------------------
export RUST_SRC_PATH="$DEVDIR/rust/src"
export RUSTUP_HOME="$HOME/.rustup"
export PATH="$RUSTUP_HOME/bin:$PATH"
