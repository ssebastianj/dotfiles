# shellcheck shell=bash

#### =========================== Functions ===================================

# Assume "bash" shell by default
# 1 = bash
# 2 = zsh
# 3 = fish
guessed_shell="1"

guess_shell() {
    if [[ -n "$BASH_VERSION" ]]; then
        # Assume shell is bash
        guessed_shell="1"
    elif [[ -n "$ZSH_VERSION" ]]; then
        # Assume shell is zsh
        guessed_shell="2"
    elif [[ -n "$FISH_VERSION" ]]; then
        # Assume shell is fish
        guessed_shell="3"
    fi
}
# Try to guess shell
guess_shell

is_bash_shell() {
    [[ "$guessed_shell" == "1" ]]
}

is_zsh_shell() {
    [[ "$guessed_shell" == "2" ]]
}

is_fish_shell() {
    [[ "$guessed_shell" == "3" ]]
}

#### ============================ ssebastianj ================================

#### Aliases -----------------------------------------------------------------
# shellcheck disable=SC1090
[[ -s "$HOME/.aliases" ]] && source "$HOME/.aliases"

#### Root dir for development purposes ---------------------------------------
export DEVDIR="$HOME/development"

#### rbenv -------------------------------------------------------------------
# FIXME: Adds startup delay
lazyrbenv() {
    unset -f rbenv
    export RBENV_ROOT="$HOME/.rbenv"
    export PATH="$HOME/.rbenv/bin:$PATH"
    [[ -d "$RBENV_ROOT" ]] && eval "$(rbenv init -)"
}

rbenv() {
    lazyrbenv
    rbenv "$@"
}

#### tmuxinator --------------------------------------------------------------
export EDITOR="vim"

if [[ -s "$HOME/.bin/tmuxinator.zsh" && is_zsh_shell ]]; then
    # shellcheck disable=SC1090
    source "$HOME/.bin/tmuxinator.zsh"
else
    # shellcheck disable=SC1090
    [[ -s "$HOME/.bin/tmuxinator.bash" ]] && source "$HOME/.bin/tmuxinator.bash"
fi

#### Node Version Manager ----------------------------------------------------
export NVM_DIR="$HOME/.nvm"

# FIXME: Adds startup delay
# https://github.com/creationix/nvm/issues/860
# https://github.com/creationix/nvm/issues/703
# [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

# FIXME: Just trying lazy loading nvm.
# Taken from: https://github.com/creationix/nvm/issues/860#issuecomment-242157535
# Taken from: https://gist.github.com/fl0w/07ce79bd44788f647deab307c94d6922

lazynvm() {
  unset -f nvm node npm
  export NVM_DIR=~/.nvm
  # shellcheck disable=SC1090
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
}

nvm() {
  lazynvm
  nvm "$@"
}

node() {
  lazynvm
  node "$@"
}

npm() {
  lazynvm
  npm "$@"
}


#### Added by the Heroku Toolbelt --------------------------------------------
export PATH="/usr/local/heroku/bin:$PATH"

#### Python pip user binaries ------------------------------------------------
export PATH="$HOME/.local/bin:$PATH"

#### Virtualenvwrapper -------------------------------------------------------
export WORKON_HOME="$DEVDIR/.virtualenvs"
export PROJECT_HOME="$DEVDIR"
export VIRTUALENVWRAPPER_SCRIPT="$HOME/.local/bin/virtualenvwrapper.sh"
# shellcheck disable=SC1090
[[ -s "$HOME/.local/bin/virtualenvwrapper_lazy.sh" ]] && . "$HOME/.local/bin/virtualenvwrapper_lazy.sh"

#### Django ------------------------------------------------------------------
export DJANGO_SRC_PATH="$DEVDIR/django"

if [[ -d "$DJANGO_SRC_PATH" ]]; then
    if is_zsh_shell; then
        autoload -Uz bashcompinit && bashcompinit
    fi

    # shellcheck disable=SC1090
    source "$DJANGO_SRC_PATH/extras/django_bash_completion"
fi

#### Golang ------------------------------------------------------------------
# shellcheck disable=SC1090
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"

export GOPATH="$DEVDIR/gocode"
export PATH="$PATH:$GOPATH/bin"

#### Git ---------------------------------------------------------------------
export PATH="$HOME/.git-contrib:$PATH"

#### Rust --------------------------------------------------------------------
export RUST_SRC_PATH="$DEVDIR/rust/src"
export CARGO_HOME="$HOME/.cargo"
export PATH="$CARGO_HOME/bin:$PATH"

#### Perl
PATH="$HOME/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT=(--install_base "$HOME/perl5"); export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"; export PERL_MM_OPT;

#### Haskell
export PATH="$HOME/.cabal/bin:$PATH"

